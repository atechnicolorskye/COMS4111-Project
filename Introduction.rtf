{\rtf1\ansi\ansicpg1252\cocoartf1348\cocoasubrtf170
{\fonttbl\f0\fswiss\fcharset0 Helvetica;}
{\colortbl;\red255\green255\blue255;}
\vieww10800\viewh8400\viewkind0
\deftab560
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardeftab560\sl336\slmult1\pardirnatural\qj

\f0\fs24 \cf0 The project is to replicate Spotify's music database while excluding some of the less salient features. We have the following entities: artist, album, song, genre, playlist, label and concert and the following relationships: contribute_to, is_part_of, belongs_to, releases, contains, performs_at. Our  most interesting finding is that we could use less relationships that we first thought we needed as belongs_to and releases are relations with 4 and 3 degrees respectively. We also found that we did not need to include weak entities and the at most and only one relations. We will use data from album databases such as MusicBrainz to populate all fields of the database apart from and concert information. We can then obtain concert information from sites such as Songkick which maintain a list of concerts for each artist. The users would access the database from a website that would be similar in features to Spotify and they will be able to search for all single entities, a combination of artist and song, artist and album, artist and label, artist and label. Hopefully we would be able to implement a simple recommendation system for the website if time permits. Users would be able to add data for all fields to the website but deletion of artists, songs, albums and genre would be carried out by moderators who would fact check. Lastly, playlists would be freely created and maintained by the users. Both of us will not drop the course as it would fulfil our system requirement.}